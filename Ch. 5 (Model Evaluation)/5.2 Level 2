#Researchers collected measurements from loblolly pines.
#Calculate the mean absolute error metric for the model using the true values and the predicted values.

# Import packages and functions
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_absolute_error

# Load the dataset
pines = pd.read_csv('pines_sample.csv')

# Store relevant columns as variables
X = pines['age']
y = pines['height']

# Initialize the model -- polynomial regression model
polyFeatures = PolynomialFeatures(degree=4, include_bias=False)
xPoly = polyFeatures.fit_transform(X.values.reshape(-1, 1))
polyModel = LinearRegression()

# Fit the model
polyModel = polyModel.fit(xPoly, y)

# Make predictions
yPredicted = polyModel.predict(xPoly)

# Evaluate accuracy
# Your code goes here 
MAE = mean_absolute_error(y, yPredicted)

# Print metric
print('Mean absolute error =', MAE)

#output
#Mean absolute error = 1.3119079477545632

#Interpretation
#The MAE is 1.3119, meaning that, on average, the model's predictions are off by approximately 1.31 units (likely measured in the same unit as the height, such as meters or feet).
