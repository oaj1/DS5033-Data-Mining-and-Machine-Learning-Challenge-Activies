#This dataset contains data on field goal distance and outcome (whether or not the kick was successful) during the 2000 through 2008 NFL seasons.
#Use the sklearn.metrics module to calculate precision for a Gaussian Naive Bayes model.
#Use the sklearn.metrics module to calculate recall for a Gaussian Naive Bayes model.

# Import packages and functions
import numpy as np
import pandas as pd
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB

# Load the field goal dataset
fieldGoal = pd.read_csv('fg_attempt.csv')

# Define input and output features
X = fieldGoal[['Distance', 'ScoreDiffPreKick']]
y = fieldGoal[['Outcome']]

# Scale the input features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Initialize and fit a Gaussian naive Bayes model
NBModel = GaussianNB()
NBModel.fit(X, np.ravel(y))

# Calculate the predictions for each instance in X
predFG = NBModel.predict(X)

# Calculate the precision
precision = metrics.precision_score (y, predFG)

# Calculate the recall
recall = metrics.recall_score (np.ravel(y), predFG)

print('GaussianNB model precision:', round(precision, 3))
print('GaussianNB model recall:', round(recall, 3))


#output
#GaussianNB model precision: 0.948
#GaussianNB model recall: 0.88

#Interpretation
Precision (94.8%):

#The model is highly precise, meaning it rarely predicts a field goal attempt as successful when it is not.
#This is important in contexts where false positives (incorrectly predicting success) have significant consequences, such as making decisions based on success probability.


#Recall (88%):

#The model is also good at identifying successful field goals but slightly less so than its precision.
#It misses 12% of actual successful attempts, which means it could fail to predict success for some kicks that should have been classified as such.
